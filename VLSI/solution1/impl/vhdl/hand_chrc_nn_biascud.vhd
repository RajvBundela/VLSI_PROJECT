-- ==============================================================
-- File generated on Sun Nov 13 22:58:37 +0530 2022
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2018.3 (64-bit)
-- SW Build 2405991 on Thu Dec  6 23:38:27 MST 2018
-- IP Build 2404404 on Fri Dec  7 01:43:56 MST 2018
-- Copyright 1986-2018 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity hand_chrc_nn_biascud_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 100
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of hand_chrc_nn_biascud_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110011011101111111100011001", 
    1 => "10111110010111010101100000000000", 
    2 => "10111110110101111111000000100100", 
    3 => "10111110101101110111100000110110", 
    4 => "10111100111001110101101101011001", 
    5 => "00111110100100001000100011010111", 
    6 => "00111111000111001001011111101010", 
    7 => "00111110101111101101010000111101", 
    8 => "00111110001011101101001100001111", 
    9 => "10111110000011111110010010111101", 
    10 => "10111110100010001000100110100000", 
    11 => "10111101010110111111101100111110", 
    12 => "10111110100000111100011111110111", 
    13 => "10111101101110101010011101100110", 
    14 => "00111101111100101011111101010101", 
    15 => "10111111001101111010000111000010", 
    16 => "00111110110001010010110001111100", 
    17 => "00111110100111101000000100100100", 
    18 => "00111110010111110001010100011110", 
    19 => "10111101000111000001111011001010", 
    20 => "00111110110101110011001100000001", 
    21 => "10111110001001011010100111101011", 
    22 => "10111110101001010010111000001110", 
    23 => "00111110001100010000110110111111", 
    24 => "00111101011011111001010101101010", 
    25 => "00111101011011111101011010100010", 
    26 => "00111110101111101110000000001001", 
    27 => "00111110001111011111100010110001", 
    28 => "00111101101110101110011111100011", 
    29 => "00111110000000001111011011110001", 
    30 => "00111110010110010010101011111010", 
    31 => "10111110001010110011010100101011", 
    32 => "10111101000110110100110100101110", 
    33 => "00111111000000110001110000100010", 
    34 => "10111101111001110010010000110001", 
    35 => "00111101001101011110100100001011", 
    36 => "00111101110110011011101010100001", 
    37 => "00111110000000011010010010111110", 
    38 => "10111110011000111100000110001011", 
    39 => "10111111000011110100100101101011", 
    40 => "10111101101001110100011101000100", 
    41 => "10111101111100101000000001101011", 
    42 => "00111111001100100010010110000101", 
    43 => "00111110100011111000001110011101", 
    44 => "10111100000111010111010110000111", 
    45 => "00111110101000011110101100100000", 
    46 => "10111101001111011010110011101111", 
    47 => "00111110100111110011010000001101", 
    48 => "00111111011101000101010001101001", 
    49 => "00111110101000111011111011101100", 
    50 => "00111110010000000110111110101100", 
    51 => "00111100100001010110001010101011", 
    52 => "10111101101110010111111101111110", 
    53 => "00111110010000100101101111111011", 
    54 => "00111110010110011100100100001100", 
    55 => "10111110010111011100011110101100", 
    56 => "00111110100011111111000101010010", 
    57 => "00111101001011101111100100101101", 
    58 => "10111101111100011110011011001101", 
    59 => "10111110111111011110111001010111", 
    60 => "10111111000000101111110101110110", 
    61 => "10111101001110011100110110011100", 
    62 => "00111101100111010101110011100000", 
    63 => "00111110010101001000111000000100", 
    64 => "10111101000100110101001010101000", 
    65 => "00111110100011110111011111010001", 
    66 => "10111110111001101001101001001110", 
    67 => "10111110001110101110000000111011", 
    68 => "10111110100010101000110001111010", 
    69 => "00111111010000100011001110111110", 
    70 => "10111101010000101010110010000011", 
    71 => "00111111000001000111101001111101", 
    72 => "10111110000100001011110000111000", 
    73 => "10111110010110100101001110111001", 
    74 => "00111110101110101101001100100000", 
    75 => "00111100110011101111101000111001", 
    76 => "00111110000101010111001100100001", 
    77 => "10111101000000101100110011001110", 
    78 => "10111110100001000101100011001101", 
    79 => "00111110001000000110100111101000", 
    80 => "00111100100000101010101101000001", 
    81 => "10111101011101101011010000100111", 
    82 => "00111101011100011011101101111111", 
    83 => "10111110000000000010001100100001", 
    84 => "00111111001001101100011100010001", 
    85 => "10111110001101100100010110100010", 
    86 => "10111110100111110111101011110110", 
    87 => "10111110010111100101011001000111", 
    88 => "00111110100011000000000100011101", 
    89 => "00111110100000001011010100100100", 
    90 => "10111110011010100000000010011111", 
    91 => "00111101101011110100111010110000", 
    92 => "10111110101110111000001110001100", 
    93 => "10111110101011011000111000100010", 
    94 => "00111110101010101000011000101111", 
    95 => "00111110101001111000000101100010", 
    96 => "00111100011000001010110101010100", 
    97 => "00111111000010111011001001000110", 
    98 => "10111101000010111011011011101101", 
    99 => "00111110001010101010000000000010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity hand_chrc_nn_biascud is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 100;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of hand_chrc_nn_biascud is
    component hand_chrc_nn_biascud_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    hand_chrc_nn_biascud_rom_U :  component hand_chrc_nn_biascud_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


