// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="hand_chrc_nn,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xa7a12tcsg325-1q,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.451000,HLS_SYN_LAT=1134163,HLS_SYN_TPT=none,HLS_SYN_MEM=522,HLS_SYN_DSP=34,HLS_SYN_FF=6953,HLS_SYN_LUT=10366,HLS_VERSION=2018_3}" *)

module hand_chrc_nn (
        ap_clk,
        ap_rst_n,
        X_Addr_A,
        X_EN_A,
        X_WEN_A,
        X_Din_A,
        X_Dout_A,
        X_Clk_A,
        X_Rst_A,
        s_axi_CRTL_BUS_AWVALID,
        s_axi_CRTL_BUS_AWREADY,
        s_axi_CRTL_BUS_AWADDR,
        s_axi_CRTL_BUS_WVALID,
        s_axi_CRTL_BUS_WREADY,
        s_axi_CRTL_BUS_WDATA,
        s_axi_CRTL_BUS_WSTRB,
        s_axi_CRTL_BUS_ARVALID,
        s_axi_CRTL_BUS_ARREADY,
        s_axi_CRTL_BUS_ARADDR,
        s_axi_CRTL_BUS_RVALID,
        s_axi_CRTL_BUS_RREADY,
        s_axi_CRTL_BUS_RDATA,
        s_axi_CRTL_BUS_RRESP,
        s_axi_CRTL_BUS_BVALID,
        s_axi_CRTL_BUS_BREADY,
        s_axi_CRTL_BUS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 148'd1;
parameter    ap_ST_fsm_state2 = 148'd2;
parameter    ap_ST_fsm_state3 = 148'd4;
parameter    ap_ST_fsm_state4 = 148'd8;
parameter    ap_ST_fsm_state5 = 148'd16;
parameter    ap_ST_fsm_state6 = 148'd32;
parameter    ap_ST_fsm_state7 = 148'd64;
parameter    ap_ST_fsm_state8 = 148'd128;
parameter    ap_ST_fsm_state9 = 148'd256;
parameter    ap_ST_fsm_state10 = 148'd512;
parameter    ap_ST_fsm_state11 = 148'd1024;
parameter    ap_ST_fsm_state12 = 148'd2048;
parameter    ap_ST_fsm_state13 = 148'd4096;
parameter    ap_ST_fsm_state14 = 148'd8192;
parameter    ap_ST_fsm_state15 = 148'd16384;
parameter    ap_ST_fsm_state16 = 148'd32768;
parameter    ap_ST_fsm_state17 = 148'd65536;
parameter    ap_ST_fsm_state18 = 148'd131072;
parameter    ap_ST_fsm_state19 = 148'd262144;
parameter    ap_ST_fsm_state20 = 148'd524288;
parameter    ap_ST_fsm_state21 = 148'd1048576;
parameter    ap_ST_fsm_state22 = 148'd2097152;
parameter    ap_ST_fsm_state23 = 148'd4194304;
parameter    ap_ST_fsm_state24 = 148'd8388608;
parameter    ap_ST_fsm_state25 = 148'd16777216;
parameter    ap_ST_fsm_state26 = 148'd33554432;
parameter    ap_ST_fsm_state27 = 148'd67108864;
parameter    ap_ST_fsm_state28 = 148'd134217728;
parameter    ap_ST_fsm_state29 = 148'd268435456;
parameter    ap_ST_fsm_state30 = 148'd536870912;
parameter    ap_ST_fsm_state31 = 148'd1073741824;
parameter    ap_ST_fsm_state32 = 148'd2147483648;
parameter    ap_ST_fsm_state33 = 148'd4294967296;
parameter    ap_ST_fsm_state34 = 148'd8589934592;
parameter    ap_ST_fsm_state35 = 148'd17179869184;
parameter    ap_ST_fsm_state36 = 148'd34359738368;
parameter    ap_ST_fsm_state37 = 148'd68719476736;
parameter    ap_ST_fsm_state38 = 148'd137438953472;
parameter    ap_ST_fsm_state39 = 148'd274877906944;
parameter    ap_ST_fsm_state40 = 148'd549755813888;
parameter    ap_ST_fsm_state41 = 148'd1099511627776;
parameter    ap_ST_fsm_state42 = 148'd2199023255552;
parameter    ap_ST_fsm_state43 = 148'd4398046511104;
parameter    ap_ST_fsm_state44 = 148'd8796093022208;
parameter    ap_ST_fsm_state45 = 148'd17592186044416;
parameter    ap_ST_fsm_state46 = 148'd35184372088832;
parameter    ap_ST_fsm_state47 = 148'd70368744177664;
parameter    ap_ST_fsm_state48 = 148'd140737488355328;
parameter    ap_ST_fsm_state49 = 148'd281474976710656;
parameter    ap_ST_fsm_state50 = 148'd562949953421312;
parameter    ap_ST_fsm_state51 = 148'd1125899906842624;
parameter    ap_ST_fsm_state52 = 148'd2251799813685248;
parameter    ap_ST_fsm_state53 = 148'd4503599627370496;
parameter    ap_ST_fsm_state54 = 148'd9007199254740992;
parameter    ap_ST_fsm_state55 = 148'd18014398509481984;
parameter    ap_ST_fsm_state56 = 148'd36028797018963968;
parameter    ap_ST_fsm_state57 = 148'd72057594037927936;
parameter    ap_ST_fsm_state58 = 148'd144115188075855872;
parameter    ap_ST_fsm_state59 = 148'd288230376151711744;
parameter    ap_ST_fsm_state60 = 148'd576460752303423488;
parameter    ap_ST_fsm_state61 = 148'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 148'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 148'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 148'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 148'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 148'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 148'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 148'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 148'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 148'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 148'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 148'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 148'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 148'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 148'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 148'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 148'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 148'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 148'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 148'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 148'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 148'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 148'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 148'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 148'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 148'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 148'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 148'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 148'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 148'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 148'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 148'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 148'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 148'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 148'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 148'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 148'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 148'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 148'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 148'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 148'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 148'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 148'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state104 = 148'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state105 = 148'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state106 = 148'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state107 = 148'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state108 = 148'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state109 = 148'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state110 = 148'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state111 = 148'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state112 = 148'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state113 = 148'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state114 = 148'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state115 = 148'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state116 = 148'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state117 = 148'd83076749736557242056487941267521536;
parameter    ap_ST_fsm_state118 = 148'd166153499473114484112975882535043072;
parameter    ap_ST_fsm_state119 = 148'd332306998946228968225951765070086144;
parameter    ap_ST_fsm_state120 = 148'd664613997892457936451903530140172288;
parameter    ap_ST_fsm_state121 = 148'd1329227995784915872903807060280344576;
parameter    ap_ST_fsm_state122 = 148'd2658455991569831745807614120560689152;
parameter    ap_ST_fsm_state123 = 148'd5316911983139663491615228241121378304;
parameter    ap_ST_fsm_state124 = 148'd10633823966279326983230456482242756608;
parameter    ap_ST_fsm_state125 = 148'd21267647932558653966460912964485513216;
parameter    ap_ST_fsm_state126 = 148'd42535295865117307932921825928971026432;
parameter    ap_ST_fsm_state127 = 148'd85070591730234615865843651857942052864;
parameter    ap_ST_fsm_state128 = 148'd170141183460469231731687303715884105728;
parameter    ap_ST_fsm_state129 = 148'd340282366920938463463374607431768211456;
parameter    ap_ST_fsm_state130 = 148'd680564733841876926926749214863536422912;
parameter    ap_ST_fsm_state131 = 148'd1361129467683753853853498429727072845824;
parameter    ap_ST_fsm_state132 = 148'd2722258935367507707706996859454145691648;
parameter    ap_ST_fsm_state133 = 148'd5444517870735015415413993718908291383296;
parameter    ap_ST_fsm_state134 = 148'd10889035741470030830827987437816582766592;
parameter    ap_ST_fsm_state135 = 148'd21778071482940061661655974875633165533184;
parameter    ap_ST_fsm_state136 = 148'd43556142965880123323311949751266331066368;
parameter    ap_ST_fsm_state137 = 148'd87112285931760246646623899502532662132736;
parameter    ap_ST_fsm_state138 = 148'd174224571863520493293247799005065324265472;
parameter    ap_ST_fsm_state139 = 148'd348449143727040986586495598010130648530944;
parameter    ap_ST_fsm_state140 = 148'd696898287454081973172991196020261297061888;
parameter    ap_ST_fsm_state141 = 148'd1393796574908163946345982392040522594123776;
parameter    ap_ST_fsm_state142 = 148'd2787593149816327892691964784081045188247552;
parameter    ap_ST_fsm_state143 = 148'd5575186299632655785383929568162090376495104;
parameter    ap_ST_fsm_state144 = 148'd11150372599265311570767859136324180752990208;
parameter    ap_ST_fsm_state145 = 148'd22300745198530623141535718272648361505980416;
parameter    ap_ST_fsm_state146 = 148'd44601490397061246283071436545296723011960832;
parameter    ap_ST_fsm_state147 = 148'd89202980794122492566142873090593446023921664;
parameter    ap_ST_fsm_state148 = 148'd178405961588244985132285746181186892047843328;
parameter    C_S_AXI_CRTL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CRTL_BUS_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CRTL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output  [31:0] X_Addr_A;
output   X_EN_A;
output  [3:0] X_WEN_A;
output  [31:0] X_Din_A;
input  [31:0] X_Dout_A;
output   X_Clk_A;
output   X_Rst_A;
input   s_axi_CRTL_BUS_AWVALID;
output   s_axi_CRTL_BUS_AWREADY;
input  [C_S_AXI_CRTL_BUS_ADDR_WIDTH - 1:0] s_axi_CRTL_BUS_AWADDR;
input   s_axi_CRTL_BUS_WVALID;
output   s_axi_CRTL_BUS_WREADY;
input  [C_S_AXI_CRTL_BUS_DATA_WIDTH - 1:0] s_axi_CRTL_BUS_WDATA;
input  [C_S_AXI_CRTL_BUS_WSTRB_WIDTH - 1:0] s_axi_CRTL_BUS_WSTRB;
input   s_axi_CRTL_BUS_ARVALID;
output   s_axi_CRTL_BUS_ARREADY;
input  [C_S_AXI_CRTL_BUS_ADDR_WIDTH - 1:0] s_axi_CRTL_BUS_ARADDR;
output   s_axi_CRTL_BUS_RVALID;
input   s_axi_CRTL_BUS_RREADY;
output  [C_S_AXI_CRTL_BUS_DATA_WIDTH - 1:0] s_axi_CRTL_BUS_RDATA;
output  [1:0] s_axi_CRTL_BUS_RRESP;
output   s_axi_CRTL_BUS_BVALID;
input   s_axi_CRTL_BUS_BREADY;
output  [1:0] s_axi_CRTL_BUS_BRESP;
output   interrupt;

reg X_EN_A;
reg X_Rst_A;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [147:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] y;
wire   [16:0] hand_mulchrc_nn_float_s_address0;
reg    hand_mulchrc_nn_float_s_ce0;
wire   [31:0] hand_mulchrc_nn_float_s_q0;
wire   [6:0] bias1_0_address0;
reg    bias1_0_ce0;
wire   [31:0] bias1_0_q0;
wire   [11:0] lay21_address0;
reg    lay21_ce0;
wire   [31:0] lay21_q0;
wire   [7:0] ap_return;
wire   [31:0] grp_fu_359_p2;
reg   [31:0] reg_389;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state85;
wire   [31:0] h1_q0;
reg   [31:0] reg_394;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state81;
wire   [31:0] grp_fu_354_p2;
reg   [31:0] reg_400;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state90;
wire   [63:0] grp_fu_366_p1;
reg   [63:0] reg_406;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state80;
wire   [0:0] exitcond_fu_596_p2;
wire   [63:0] grp_fu_384_p2;
reg   [63:0] reg_411;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state108;
wire   [63:0] grp_fu_374_p2;
reg   [63:0] reg_416;
wire    ap_CS_fsm_state45;
wire    ap_CS_fsm_state114;
wire   [63:0] grp_fu_379_p2;
reg   [63:0] reg_421;
wire    ap_CS_fsm_state76;
wire    ap_CS_fsm_state145;
wire   [31:0] grp_fu_363_p1;
reg   [31:0] reg_426;
wire    ap_CS_fsm_state77;
wire    ap_CS_fsm_state146;
wire   [16:0] next_mul_fu_432_p2;
reg   [16:0] next_mul_reg_741;
wire    ap_CS_fsm_state2;
wire   [6:0] indvarinc_fu_438_p2;
reg   [6:0] indvarinc_reg_746;
wire   [9:0] indvarinc1_fu_444_p2;
reg   [9:0] indvarinc1_reg_751;
wire    ap_CS_fsm_state3;
wire   [63:0] tmp_36_cast_fu_460_p1;
reg   [63:0] tmp_36_cast_reg_756;
wire   [0:0] tmp_2_fu_465_p2;
reg   [0:0] tmp_2_reg_766;
wire   [6:0] i_fu_483_p2;
reg   [6:0] i_reg_776;
wire    ap_CS_fsm_state5;
wire   [63:0] tmp_4_fu_489_p1;
reg   [63:0] tmp_4_reg_781;
wire   [0:0] exitcond5_fu_477_p2;
wire   [16:0] next_mul2_fu_494_p2;
reg   [16:0] next_mul2_reg_791;
wire    ap_CS_fsm_state7;
wire   [6:0] i_1_fu_506_p2;
reg   [6:0] i_1_reg_799;
reg   [6:0] h1_addr_1_reg_804;
wire   [0:0] exitcond4_fu_500_p2;
wire   [9:0] j_2_fu_523_p2;
reg   [9:0] j_2_reg_812;
wire    ap_CS_fsm_state8;
wire   [0:0] exitcond3_fu_517_p2;
reg   [31:0] X_load_reg_827;
wire    ap_CS_fsm_state9;
wire   [31:0] lay1_q0;
reg   [31:0] lay1_load_reg_832;
wire   [11:0] next_mul4_fu_564_p2;
reg   [11:0] next_mul4_reg_837;
wire    ap_CS_fsm_state79;
wire   [31:0] num_2_cast2_fu_570_p1;
reg   [31:0] num_2_cast2_reg_842;
wire   [4:0] i_2_fu_580_p2;
reg   [4:0] i_2_reg_850;
wire   [6:0] j_3_fu_602_p2;
reg   [6:0] j_3_reg_858;
reg   [31:0] lay21_load_reg_873;
wire   [0:0] tmp_32_fu_369_p2;
reg   [0:0] tmp_32_reg_878;
wire    ap_CS_fsm_state147;
wire   [31:0] num_1_fu_726_p3;
wire    ap_CS_fsm_state148;
wire   [31:0] mm_1_fu_733_p3;
reg   [16:0] lay1_address0;
reg    lay1_ce0;
reg    lay1_we0;
reg   [6:0] h1_address0;
reg    h1_ce0;
reg    h1_we0;
reg   [31:0] h1_d0;
reg   [6:0] invdar_reg_204;
wire    ap_CS_fsm_state4;
wire   [0:0] tmp_3_fu_471_p2;
reg   [16:0] phi_mul_reg_216;
reg   [9:0] invdar1_reg_228;
reg   [6:0] i1_reg_239;
wire    ap_CS_fsm_state6;
reg   [6:0] i2_reg_250;
wire    ap_CS_fsm_state78;
reg   [16:0] phi_mul1_reg_261;
reg   [9:0] j_reg_273;
wire    ap_CS_fsm_state19;
reg   [31:0] num_reg_284;
reg   [4:0] num_2_reg_296;
reg   [31:0] mm_reg_307;
reg   [11:0] phi_mul3_reg_319;
reg   [31:0] tmp_16_reg_331;
wire   [0:0] exitcond1_fu_574_p2;
reg   [6:0] j_1_reg_343;
wire   [63:0] tmp_6_fu_512_p1;
wire   [63:0] tmp_39_cast_fu_544_p1;
wire   [63:0] tmp_11_fu_529_p1;
wire   [63:0] tmp_40_cast_fu_623_p1;
wire   [63:0] tmp_24_fu_608_p1;
wire    ap_CS_fsm_state12;
wire   [31:0] X_Addr_A_orig;
reg   [31:0] grp_fu_354_p0;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state86;
reg   [31:0] grp_fu_359_p0;
reg   [31:0] grp_fu_359_p1;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state82;
reg   [31:0] grp_fu_366_p0;
wire   [31:0] tmp_9_fu_559_p1;
wire   [31:0] tmp_17_fu_638_p1;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state109;
wire    ap_CS_fsm_state46;
wire    ap_CS_fsm_state115;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state91;
wire   [16:0] tmp_1_cast_fu_450_p1;
wire   [16:0] tmp_1_fu_454_p2;
wire   [16:0] tmp_11_cast_fu_534_p1;
wire   [16:0] tmp_15_fu_538_p2;
wire   [31:0] tmp_9_to_int_fu_549_p1;
wire   [31:0] tmp_9_neg_fu_553_p2;
wire   [7:0] tmp_fu_586_p1;
wire   [11:0] tmp_24_cast_fu_613_p1;
wire   [11:0] tmp_34_fu_617_p2;
wire   [31:0] tmp_19_to_int_fu_628_p1;
wire   [31:0] tmp_19_neg_fu_632_p2;
wire   [31:0] mm_2_to_int_fu_643_p1;
wire   [31:0] mm_to_int_fu_661_p1;
wire   [7:0] tmp_22_fu_647_p4;
wire   [22:0] tmp_23_fu_657_p1;
wire   [0:0] notrhs_fu_685_p2;
wire   [0:0] notlhs_fu_679_p2;
wire   [7:0] tmp_27_fu_665_p4;
wire   [22:0] tmp_28_fu_675_p1;
wire   [0:0] notrhs9_fu_703_p2;
wire   [0:0] notlhs8_fu_697_p2;
wire   [0:0] tmp_29_fu_691_p2;
wire   [0:0] tmp_30_fu_709_p2;
wire   [0:0] tmp_31_fu_715_p2;
wire   [0:0] tmp_33_fu_721_p2;
reg   [147:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 148'd1;
end

hand_chrc_nn_handbkb #(
    .DataWidth( 32 ),
    .AddressRange( 78400 ),
    .AddressWidth( 17 ))
hand_mulchrc_nn_float_s_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(hand_mulchrc_nn_float_s_address0),
    .ce0(hand_mulchrc_nn_float_s_ce0),
    .q0(hand_mulchrc_nn_float_s_q0)
);

hand_chrc_nn_biascud #(
    .DataWidth( 32 ),
    .AddressRange( 100 ),
    .AddressWidth( 7 ))
bias1_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bias1_0_address0),
    .ce0(bias1_0_ce0),
    .q0(bias1_0_q0)
);

hand_chrc_nn_lay21 #(
    .DataWidth( 32 ),
    .AddressRange( 2600 ),
    .AddressWidth( 12 ))
lay21_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(lay21_address0),
    .ce0(lay21_ce0),
    .q0(lay21_q0)
);

hand_chrc_nn_CRTL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CRTL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CRTL_BUS_DATA_WIDTH ))
hand_chrc_nn_CRTL_BUS_s_axi_U(
    .AWVALID(s_axi_CRTL_BUS_AWVALID),
    .AWREADY(s_axi_CRTL_BUS_AWREADY),
    .AWADDR(s_axi_CRTL_BUS_AWADDR),
    .WVALID(s_axi_CRTL_BUS_WVALID),
    .WREADY(s_axi_CRTL_BUS_WREADY),
    .WDATA(s_axi_CRTL_BUS_WDATA),
    .WSTRB(s_axi_CRTL_BUS_WSTRB),
    .ARVALID(s_axi_CRTL_BUS_ARVALID),
    .ARREADY(s_axi_CRTL_BUS_ARREADY),
    .ARADDR(s_axi_CRTL_BUS_ARADDR),
    .RVALID(s_axi_CRTL_BUS_RVALID),
    .RREADY(s_axi_CRTL_BUS_RREADY),
    .RDATA(s_axi_CRTL_BUS_RDATA),
    .RRESP(s_axi_CRTL_BUS_RRESP),
    .BVALID(s_axi_CRTL_BUS_BVALID),
    .BREADY(s_axi_CRTL_BUS_BREADY),
    .BRESP(s_axi_CRTL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .ap_return(ap_return),
    .y(y)
);

hand_chrc_nn_lay1 #(
    .DataWidth( 32 ),
    .AddressRange( 78400 ),
    .AddressWidth( 17 ))
lay1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(lay1_address0),
    .ce0(lay1_ce0),
    .we0(lay1_we0),
    .d0(hand_mulchrc_nn_float_s_q0),
    .q0(lay1_q0)
);

hand_chrc_nn_h1 #(
    .DataWidth( 32 ),
    .AddressRange( 100 ),
    .AddressWidth( 7 ))
h1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(h1_address0),
    .ce0(h1_ce0),
    .we0(h1_we0),
    .d0(h1_d0),
    .q0(h1_q0)
);

hand_chrc_nn_fadddEe #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
hand_chrc_nn_fadddEe_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_354_p0),
    .din1(reg_389),
    .ce(1'b1),
    .dout(grp_fu_354_p2)
);

hand_chrc_nn_fmuleOg #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
hand_chrc_nn_fmuleOg_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_359_p0),
    .din1(grp_fu_359_p1),
    .ce(1'b1),
    .dout(grp_fu_359_p2)
);

hand_chrc_nn_fptrfYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
hand_chrc_nn_fptrfYi_U3(
    .din0(reg_421),
    .dout(grp_fu_363_p1)
);

hand_chrc_nn_fpexg8j #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
hand_chrc_nn_fpexg8j_U4(
    .din0(grp_fu_366_p0),
    .dout(grp_fu_366_p1)
);

hand_chrc_nn_fcmphbi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
hand_chrc_nn_fcmphbi_U5(
    .din0(reg_426),
    .din1(mm_reg_307),
    .opcode(5'd2),
    .dout(tmp_32_fu_369_p2)
);

hand_chrc_nn_daddibs #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
hand_chrc_nn_daddibs_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_411),
    .din1(64'd4607182418800017408),
    .ce(1'b1),
    .dout(grp_fu_374_p2)
);

hand_chrc_nn_ddivjbC #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
hand_chrc_nn_ddivjbC_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(64'd4607182418800017408),
    .din1(reg_416),
    .ce(1'b1),
    .dout(grp_fu_379_p2)
);

hand_chrc_nn_dexpkbM #(
    .ID( 1 ),
    .NUM_STAGE( 18 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
hand_chrc_nn_dexpkbM_U8(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(64'd0),
    .din1(reg_406),
    .ce(1'b1),
    .dout(grp_fu_384_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_3_fu_471_p2 == 1'd1) & (tmp_2_reg_766 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        i1_reg_239 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        i1_reg_239 <= i_reg_776;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5_fu_477_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        i2_reg_250 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state78)) begin
        i2_reg_250 <= i_1_reg_799;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_2_reg_766 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        invdar1_reg_228 <= indvarinc1_reg_751;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        invdar1_reg_228 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_3_fu_471_p2 == 1'd0) & (tmp_2_reg_766 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        invdar_reg_204 <= indvarinc_reg_746;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        invdar_reg_204 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_574_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state79))) begin
        j_1_reg_343 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state90)) begin
        j_1_reg_343 <= j_3_reg_858;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_500_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        j_reg_273 <= 10'd0;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        j_reg_273 <= j_2_reg_812;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_500_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        mm_reg_307 <= 32'd3240099840;
    end else if ((1'b1 == ap_CS_fsm_state148)) begin
        mm_reg_307 <= mm_1_fu_733_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_500_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        num_2_reg_296 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state148)) begin
        num_2_reg_296 <= i_2_reg_850;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_500_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        num_reg_284 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state148)) begin
        num_reg_284 <= num_1_fu_726_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5_fu_477_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        phi_mul1_reg_261 <= 17'd0;
    end else if ((1'b1 == ap_CS_fsm_state78)) begin
        phi_mul1_reg_261 <= next_mul2_reg_791;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_500_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        phi_mul3_reg_319 <= 12'd0;
    end else if ((1'b1 == ap_CS_fsm_state148)) begin
        phi_mul3_reg_319 <= next_mul4_reg_837;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_3_fu_471_p2 == 1'd0) & (tmp_2_reg_766 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        phi_mul_reg_216 <= next_mul_reg_741;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul_reg_216 <= 17'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_574_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state79))) begin
        tmp_16_reg_331 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state90)) begin
        tmp_16_reg_331 <= grp_fu_354_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        X_load_reg_827 <= X_Dout_A;
        lay1_load_reg_832 <= lay1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_500_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        h1_addr_1_reg_804 <= tmp_6_fu_512_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_1_reg_799 <= i_1_fu_506_p2;
        next_mul2_reg_791 <= next_mul2_fu_494_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        i_2_reg_850 <= i_2_fu_580_p2;
        next_mul4_reg_837 <= next_mul4_fu_564_p2;
        num_2_cast2_reg_842[4 : 0] <= num_2_cast2_fu_570_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_reg_776 <= i_fu_483_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        indvarinc1_reg_751 <= indvarinc1_fu_444_p2;
        tmp_2_reg_766 <= tmp_2_fu_465_p2;
        tmp_36_cast_reg_756[16 : 0] <= tmp_36_cast_fu_460_p1[16 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        indvarinc_reg_746 <= indvarinc_fu_438_p2;
        next_mul_reg_741 <= next_mul_fu_432_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        j_2_reg_812 <= j_2_fu_523_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state80)) begin
        j_3_reg_858 <= j_3_fu_602_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state81)) begin
        lay21_load_reg_873 <= lay21_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state85) | (1'b1 == ap_CS_fsm_state13))) begin
        reg_389 <= grp_fu_359_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state13))) begin
        reg_394 <= h1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state18))) begin
        reg_400 <= grp_fu_354_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state21) | ((exitcond_fu_596_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state80)))) begin
        reg_406 <= grp_fu_366_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state108) | (1'b1 == ap_CS_fsm_state39))) begin
        reg_411 <= grp_fu_384_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state114) | (1'b1 == ap_CS_fsm_state45))) begin
        reg_416 <= grp_fu_374_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state145) | (1'b1 == ap_CS_fsm_state76))) begin
        reg_421 <= grp_fu_379_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state146) | (1'b1 == ap_CS_fsm_state77))) begin
        reg_426 <= grp_fu_363_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state147)) begin
        tmp_32_reg_878 <= tmp_32_fu_369_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5_fu_477_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        tmp_4_reg_781[6 : 0] <= tmp_4_fu_489_p1[6 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        X_EN_A = 1'b1;
    end else begin
        X_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_574_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state79))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_574_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state79))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        bias1_0_ce0 = 1'b1;
    end else begin
        bias1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        grp_fu_354_p0 = tmp_16_reg_331;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_354_p0 = reg_394;
    end else begin
        grp_fu_354_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state82)) begin
        grp_fu_359_p0 = reg_394;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_359_p0 = X_load_reg_827;
    end else begin
        grp_fu_359_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state82)) begin
        grp_fu_359_p1 = lay21_load_reg_873;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_359_p1 = lay1_load_reg_832;
    end else begin
        grp_fu_359_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state80)) begin
        grp_fu_366_p0 = tmp_17_fu_638_p1;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_fu_366_p0 = tmp_9_fu_559_p1;
    end else begin
        grp_fu_366_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state80)) begin
        h1_address0 = tmp_24_fu_608_p1;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state8))) begin
        h1_address0 = h1_addr_1_reg_804;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        h1_address0 = tmp_4_reg_781;
    end else begin
        h1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state80))) begin
        h1_ce0 = 1'b1;
    end else begin
        h1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state78)) begin
        h1_d0 = reg_426;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        h1_d0 = reg_400;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        h1_d0 = bias1_0_q0;
    end else begin
        h1_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state6))) begin
        h1_we0 = 1'b1;
    end else begin
        h1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        hand_mulchrc_nn_float_s_ce0 = 1'b1;
    end else begin
        hand_mulchrc_nn_float_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        lay1_address0 = tmp_39_cast_fu_544_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        lay1_address0 = tmp_36_cast_reg_756;
    end else begin
        lay1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state8))) begin
        lay1_ce0 = 1'b1;
    end else begin
        lay1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        lay1_we0 = 1'b1;
    end else begin
        lay1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state80)) begin
        lay21_ce0 = 1'b1;
    end else begin
        lay21_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((tmp_3_fu_471_p2 == 1'd1) & (tmp_2_reg_766 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else if (((tmp_3_fu_471_p2 == 1'd0) & (tmp_2_reg_766 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((exitcond5_fu_477_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state7 : begin
            if (((exitcond4_fu_500_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state79;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((exitcond3_fu_517_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state79 : begin
            if (((exitcond1_fu_574_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state79))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state80;
            end
        end
        ap_ST_fsm_state80 : begin
            if (((exitcond_fu_596_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state80))) begin
                ap_NS_fsm = ap_ST_fsm_state91;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state81;
            end
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state124;
        end
        ap_ST_fsm_state124 : begin
            ap_NS_fsm = ap_ST_fsm_state125;
        end
        ap_ST_fsm_state125 : begin
            ap_NS_fsm = ap_ST_fsm_state126;
        end
        ap_ST_fsm_state126 : begin
            ap_NS_fsm = ap_ST_fsm_state127;
        end
        ap_ST_fsm_state127 : begin
            ap_NS_fsm = ap_ST_fsm_state128;
        end
        ap_ST_fsm_state128 : begin
            ap_NS_fsm = ap_ST_fsm_state129;
        end
        ap_ST_fsm_state129 : begin
            ap_NS_fsm = ap_ST_fsm_state130;
        end
        ap_ST_fsm_state130 : begin
            ap_NS_fsm = ap_ST_fsm_state131;
        end
        ap_ST_fsm_state131 : begin
            ap_NS_fsm = ap_ST_fsm_state132;
        end
        ap_ST_fsm_state132 : begin
            ap_NS_fsm = ap_ST_fsm_state133;
        end
        ap_ST_fsm_state133 : begin
            ap_NS_fsm = ap_ST_fsm_state134;
        end
        ap_ST_fsm_state134 : begin
            ap_NS_fsm = ap_ST_fsm_state135;
        end
        ap_ST_fsm_state135 : begin
            ap_NS_fsm = ap_ST_fsm_state136;
        end
        ap_ST_fsm_state136 : begin
            ap_NS_fsm = ap_ST_fsm_state137;
        end
        ap_ST_fsm_state137 : begin
            ap_NS_fsm = ap_ST_fsm_state138;
        end
        ap_ST_fsm_state138 : begin
            ap_NS_fsm = ap_ST_fsm_state139;
        end
        ap_ST_fsm_state139 : begin
            ap_NS_fsm = ap_ST_fsm_state140;
        end
        ap_ST_fsm_state140 : begin
            ap_NS_fsm = ap_ST_fsm_state141;
        end
        ap_ST_fsm_state141 : begin
            ap_NS_fsm = ap_ST_fsm_state142;
        end
        ap_ST_fsm_state142 : begin
            ap_NS_fsm = ap_ST_fsm_state143;
        end
        ap_ST_fsm_state143 : begin
            ap_NS_fsm = ap_ST_fsm_state144;
        end
        ap_ST_fsm_state144 : begin
            ap_NS_fsm = ap_ST_fsm_state145;
        end
        ap_ST_fsm_state145 : begin
            ap_NS_fsm = ap_ST_fsm_state146;
        end
        ap_ST_fsm_state146 : begin
            ap_NS_fsm = ap_ST_fsm_state147;
        end
        ap_ST_fsm_state147 : begin
            ap_NS_fsm = ap_ST_fsm_state148;
        end
        ap_ST_fsm_state148 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign X_Addr_A = X_Addr_A_orig << 32'd2;

assign X_Addr_A_orig = tmp_11_fu_529_p1;

assign X_Clk_A = ap_clk;

assign X_Din_A = 32'd0;

always @ (*) begin
    X_Rst_A = ~ap_rst_n;
end

assign X_WEN_A = 4'd0;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state108 = ap_CS_fsm[32'd107];

assign ap_CS_fsm_state109 = ap_CS_fsm[32'd108];

assign ap_CS_fsm_state114 = ap_CS_fsm[32'd113];

assign ap_CS_fsm_state115 = ap_CS_fsm[32'd114];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state145 = ap_CS_fsm[32'd144];

assign ap_CS_fsm_state146 = ap_CS_fsm[32'd145];

assign ap_CS_fsm_state147 = ap_CS_fsm[32'd146];

assign ap_CS_fsm_state148 = ap_CS_fsm[32'd147];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_state79 = ap_CS_fsm[32'd78];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd79];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd80];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd81];

assign ap_CS_fsm_state85 = ap_CS_fsm[32'd84];

assign ap_CS_fsm_state86 = ap_CS_fsm[32'd85];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state90 = ap_CS_fsm[32'd89];

assign ap_CS_fsm_state91 = ap_CS_fsm[32'd90];

assign ap_return = (8'd65 + tmp_fu_586_p1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bias1_0_address0 = tmp_4_fu_489_p1;

assign exitcond1_fu_574_p2 = ((num_2_reg_296 == 5'd26) ? 1'b1 : 1'b0);

assign exitcond3_fu_517_p2 = ((j_reg_273 == 10'd784) ? 1'b1 : 1'b0);

assign exitcond4_fu_500_p2 = ((i2_reg_250 == 7'd100) ? 1'b1 : 1'b0);

assign exitcond5_fu_477_p2 = ((i1_reg_239 == 7'd100) ? 1'b1 : 1'b0);

assign exitcond_fu_596_p2 = ((j_1_reg_343 == 7'd100) ? 1'b1 : 1'b0);

assign hand_mulchrc_nn_float_s_address0 = tmp_36_cast_fu_460_p1;

assign i_1_fu_506_p2 = (i2_reg_250 + 7'd1);

assign i_2_fu_580_p2 = (num_2_reg_296 + 5'd1);

assign i_fu_483_p2 = (i1_reg_239 + 7'd1);

assign indvarinc1_fu_444_p2 = (invdar1_reg_228 + 10'd1);

assign indvarinc_fu_438_p2 = (invdar_reg_204 + 7'd1);

assign j_2_fu_523_p2 = (j_reg_273 + 10'd1);

assign j_3_fu_602_p2 = (j_1_reg_343 + 7'd1);

assign lay21_address0 = tmp_40_cast_fu_623_p1;

assign mm_1_fu_733_p3 = ((tmp_33_fu_721_p2[0:0] === 1'b1) ? reg_426 : mm_reg_307);

assign mm_2_to_int_fu_643_p1 = reg_426;

assign mm_to_int_fu_661_p1 = mm_reg_307;

assign next_mul2_fu_494_p2 = (phi_mul1_reg_261 + 17'd784);

assign next_mul4_fu_564_p2 = (phi_mul3_reg_319 + 12'd100);

assign next_mul_fu_432_p2 = (phi_mul_reg_216 + 17'd784);

assign notlhs8_fu_697_p2 = ((tmp_27_fu_665_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs_fu_679_p2 = ((tmp_22_fu_647_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs9_fu_703_p2 = ((tmp_28_fu_675_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs_fu_685_p2 = ((tmp_23_fu_657_p1 == 23'd0) ? 1'b1 : 1'b0);

assign num_1_fu_726_p3 = ((tmp_33_fu_721_p2[0:0] === 1'b1) ? num_2_cast2_reg_842 : num_reg_284);

assign num_2_cast2_fu_570_p1 = num_2_reg_296;

assign tmp_11_cast_fu_534_p1 = j_reg_273;

assign tmp_11_fu_529_p1 = j_reg_273;

assign tmp_15_fu_538_p2 = (phi_mul1_reg_261 + tmp_11_cast_fu_534_p1);

assign tmp_17_fu_638_p1 = tmp_19_neg_fu_632_p2;

assign tmp_19_neg_fu_632_p2 = (tmp_19_to_int_fu_628_p1 ^ 32'd2147483648);

assign tmp_19_to_int_fu_628_p1 = tmp_16_reg_331;

assign tmp_1_cast_fu_450_p1 = invdar1_reg_228;

assign tmp_1_fu_454_p2 = (phi_mul_reg_216 + tmp_1_cast_fu_450_p1);

assign tmp_22_fu_647_p4 = {{mm_2_to_int_fu_643_p1[30:23]}};

assign tmp_23_fu_657_p1 = mm_2_to_int_fu_643_p1[22:0];

assign tmp_24_cast_fu_613_p1 = j_1_reg_343;

assign tmp_24_fu_608_p1 = j_1_reg_343;

assign tmp_27_fu_665_p4 = {{mm_to_int_fu_661_p1[30:23]}};

assign tmp_28_fu_675_p1 = mm_to_int_fu_661_p1[22:0];

assign tmp_29_fu_691_p2 = (notrhs_fu_685_p2 | notlhs_fu_679_p2);

assign tmp_2_fu_465_p2 = ((invdar1_reg_228 == 10'd783) ? 1'b1 : 1'b0);

assign tmp_30_fu_709_p2 = (notrhs9_fu_703_p2 | notlhs8_fu_697_p2);

assign tmp_31_fu_715_p2 = (tmp_30_fu_709_p2 & tmp_29_fu_691_p2);

assign tmp_33_fu_721_p2 = (tmp_32_reg_878 & tmp_31_fu_715_p2);

assign tmp_34_fu_617_p2 = (phi_mul3_reg_319 + tmp_24_cast_fu_613_p1);

assign tmp_36_cast_fu_460_p1 = tmp_1_fu_454_p2;

assign tmp_39_cast_fu_544_p1 = tmp_15_fu_538_p2;

assign tmp_3_fu_471_p2 = ((invdar_reg_204 == 7'd99) ? 1'b1 : 1'b0);

assign tmp_40_cast_fu_623_p1 = tmp_34_fu_617_p2;

assign tmp_4_fu_489_p1 = i1_reg_239;

assign tmp_6_fu_512_p1 = i2_reg_250;

assign tmp_9_fu_559_p1 = tmp_9_neg_fu_553_p2;

assign tmp_9_neg_fu_553_p2 = (tmp_9_to_int_fu_549_p1 ^ 32'd2147483648);

assign tmp_9_to_int_fu_549_p1 = reg_394;

assign tmp_fu_586_p1 = num_reg_284[7:0];

always @ (posedge ap_clk) begin
    tmp_36_cast_reg_756[63:17] <= 47'b00000000000000000000000000000000000000000000000;
    tmp_4_reg_781[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    num_2_cast2_reg_842[31:5] <= 27'b000000000000000000000000000;
end

endmodule //hand_chrc_nn
